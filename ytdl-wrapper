#!/usr/bin/env python3

import subprocess as sp
import argparse
import sys

from typing import List, Union


def get_videos(links: List[str], format_options: str = "",
               title_options: str = "",
               restrict_filenames: bool = False) -> Union[List[str], int]:
    failed: List[str] = []
    base_command = "youtube-dl"

    # Pass '--restrict-filenames' to youtube-dl if it was specified
    if restrict_filenames:
        base_command += ' --restrict-filenames '

    # Pass video formatting options to youtube-dl if they were defined
    if format_options:
        base_command += ' -f "{}" '.format(format_options)

    # Pass title formatting options to youtube-dl if they were defined
    if title_options:
        base_command += ' -o "{}" '.format(title_options)

    for link in links:
        command = base_command + ' "' + link + '" '
        print('Getting "{}"...'.format(link))
        try:
            with sp.Popen(command,
                          stdout=sp.PIPE,
                          universal_newlines=True,
                          shell=True) as process:
                if process.stdout is not None:
                    # Prints the ANSI escape code to hide the cursor
                    print("\x1b[?25l", end="")
                    try:
                        # Print stdout output from the youtube-dl process
                        for line in process.stdout:
                            string = str(line.rstrip())
                            print("\r" + string, end="")
                    finally:
                        # unhide the cursor if the above loop fails somehow
                        print("\x1b[?25h")
        except KeyboardInterrupt:
            return 1
        except Exception:
            failed.append(link)

    if len(failed) >= 1:
        return failed

    return 0


def from_file(filename: str) -> List[str]:
    links: List[str] = []

    try:
        with open(filename, "r") as input_file:
            links = input_file.read().rstrip().split()
    except Exception as err:
        print(err)
        exit(1)

    return links


def main(argv: List) -> None:
    result: Union[List[str], int] = None

    parser = argparse.ArgumentParser(description='Download a list of videos')
    parser.add_argument('-F', metavar='FILE', type=str,
                        help='read a list of videos from a file')
    parser.add_argument('-f', metavar='FORMAT_OPTIONS', type=str,
                        help='youtube-dl video format options')
    parser.add_argument('-o', metavar='TITLE_FORMAT', type=str,
                        help='youtube-dl title format string')
    parser.add_argument('--restrict-filenames', action='store_true',
                        help='''
                        pass the "--restrict-filenames" directive to
                        youtube-dl
                        ''')
    parser.add_argument('input_uris', metavar='MEDIA_URI', type=str, nargs='*',
                        help='a list of URIs that point to a page with media')
    args = parser.parse_args(argv)

    if args.input_uris:  # If args.input_uris is *not* empty
        if args.F is not None:  # If both STDIN and a file are supplied, quit
            print("ytdl-wrapper: error: cannot read from both file and STDIN")
            exit(1)
        # Otherwise, get the media files pointed to by args.input_uris
        result = get_videos(args.input_uris, args.f, args.o,
                            args.restrict_filenames)
    elif args.F is None:  # If args.input_uris is empty and args.F is None
        print("ytdl-wrapper: error: no input URIs provided")
        exit(1)
    else:  # If args.input_uris is empty and args.F is *not* None
        result = get_videos(from_file(args.F), args.f, args.o,
                            args.restrict_filenames)

    if isinstance(result, int):
        exit(result)
    elif isinstance(result, list):
        if result:
            n_failed = "{} URI(s) failed to download"
            save = ", save a list to disk? (y/n): "
            write_failed = input(n_failed.format(len(result)) + save)

            if write_failed.lower() == "y":
                filename = input("Save as:")
                with open(filename, "w") as f:
                    for i in result:
                        f.write(i + "\n")
            else:
                exit(0)
    else:
        exit(127)


main(sys.argv[1:])
